{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredComment","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.adad919e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2R-XI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3Rmc4\",\"loading\":\"NewCommentForm_loading__I39hh\",\"control\":\"NewCommentForm_control__1_9WQ\",\"actions\":\"NewCommentForm_actions__12jJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1iAoF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2S7-o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__39Dh4\"};","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n    const { sendRequest, status, error } = useHttp(addComment);\n    const commentTextRef = useRef();\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === \"completed\" && !error) {\n            onAddedComment();\n        }\n    }, [onAddedComment, status, error]);\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        // optional: Could validate here\n        const enteredComment = commentTextRef.current.value;\n\n        sendRequest({\n            commentData: { text: enteredComment },\n            quoteId: props.quoteId,\n        });\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === \"pending\" && (\n                <div className='centered'>\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n\n    const { quoteId } = params;\n    const {\n        sendRequest,\n        status,\n        data: loadedComments,\n    } = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === \"pending\") {\n        comments = (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (\n        status === \"completed\" &&\n        (loadedComments || loadedComments.length > 0)\n    ) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n\n    if (\n        status === \"completed\" &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        <p className='centered'>No Comments were added yet</p>;\n    }\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, useRouteMatch } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    const match = useRouteMatch();\r\n\r\n    const { quoteId } = params;\r\n\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuote,\r\n        error,\r\n    } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === \"pending\") {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>{error}</p>;\r\n    }\r\n\r\n    if (!loadedQuote.text) {\r\n        return <p>No quote found!</p>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote\r\n                author={loadedQuote.author}\r\n                text={loadedQuote.text}\r\n            />\r\n            <Route path={`/quotes/${params.quoteId}`} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}